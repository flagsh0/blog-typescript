/* 1daa67e42e301e17a61724aa5a4b1a52af6b14d0
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export declare type RequireFields<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: NonNullable<T[P]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    Date: any;
    JSON: any;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    signIn: SignInPayload;
};
export declare type MutationSignInArgs = {
    input: SignInInput;
};
export declare type Query = {
    __typename?: 'Query';
    viewer?: Maybe<Viewer>;
    currentUser?: Maybe<User>;
};
export declare type SignInInput = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type SignInPayload = {
    __typename?: 'SignInPayload';
    user: User;
};
export declare type SignUpInput = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type SignUpPayload = {
    __typename?: 'SignUpPayload';
    user: User;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    seqId: Scalars['Int'];
    username?: Maybe<Scalars['String']>;
    birthday?: Maybe<Scalars['String']>;
    gender?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    githubProviderId?: Maybe<Scalars['String']>;
    googleProviderId?: Maybe<Scalars['String']>;
    phone_number?: Maybe<Scalars['String']>;
    profilePhoto?: Maybe<Scalars['String']>;
    isAdmin?: Maybe<Scalars['Boolean']>;
    createdAt?: Maybe<Scalars['Date']>;
    modifiedAt?: Maybe<Scalars['Date']>;
    deletedAt?: Maybe<Scalars['Date']>;
};
export declare type Viewer = {
    __typename?: 'Viewer';
    id: Scalars['ID'];
    username?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    gender?: Maybe<Scalars['String']>;
    profilePhoto?: Maybe<Scalars['String']>;
};
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = {
    Query: ResolverTypeWrapper<{}>;
    Viewer: ResolverTypeWrapper<Viewer>;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    String: ResolverTypeWrapper<Scalars['String']>;
    User: ResolverTypeWrapper<User>;
    Int: ResolverTypeWrapper<Scalars['Int']>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
    Date: ResolverTypeWrapper<Scalars['Date']>;
    Mutation: ResolverTypeWrapper<{}>;
    SignInInput: SignInInput;
    SignInPayload: ResolverTypeWrapper<SignInPayload>;
    JSON: ResolverTypeWrapper<Scalars['JSON']>;
    SignUpInput: SignUpInput;
    SignUpPayload: ResolverTypeWrapper<SignUpPayload>;
};
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = {
    Query: {};
    Viewer: Viewer;
    ID: Scalars['ID'];
    String: Scalars['String'];
    User: User;
    Int: Scalars['Int'];
    Boolean: Scalars['Boolean'];
    Date: Scalars['Date'];
    Mutation: {};
    SignInInput: SignInInput;
    SignInPayload: SignInPayload;
    JSON: Scalars['JSON'];
    SignUpInput: SignUpInput;
    SignUpPayload: SignUpPayload;
};
export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
    name: 'Date';
}
export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
    name: 'JSON';
}
export declare type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
    signIn?: Resolver<ResolversTypes['SignInPayload'], ParentType, ContextType, RequireFields<MutationSignInArgs, 'input'>>;
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
    viewer?: Resolver<Maybe<ResolversTypes['Viewer']>, ParentType, ContextType>;
    currentUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
};
export declare type SignInPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['SignInPayload'] = ResolversParentTypes['SignInPayload']> = {
    user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type SignUpPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['SignUpPayload'] = ResolversParentTypes['SignUpPayload']> = {
    user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    seqId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    birthday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    githubProviderId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    googleProviderId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    phone_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    profilePhoto?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    isAdmin?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    createdAt?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
    modifiedAt?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
    deletedAt?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type ViewerResolvers<ContextType = any, ParentType extends ResolversParentTypes['Viewer'] = ResolversParentTypes['Viewer']> = {
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    profilePhoto?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type Resolvers<ContextType = any> = {
    Date?: GraphQLScalarType;
    JSON?: GraphQLScalarType;
    Mutation?: MutationResolvers<ContextType>;
    Query?: QueryResolvers<ContextType>;
    SignInPayload?: SignInPayloadResolvers<ContextType>;
    SignUpPayload?: SignUpPayloadResolvers<ContextType>;
    User?: UserResolvers<ContextType>;
    Viewer?: ViewerResolvers<ContextType>;
};
/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;

 
// This is an extra code in addition to what graphql-codegen makes.
// Users are likely to use 'graphql-tag/loader' with 'graphql-tag/schema/loader'
// in webpack. This code enables the result to be typed.
import { DocumentNode } from 'graphql'
export default DocumentNode
