/* 75d30fceaa8fa492fca5b5a25c16c5043a6c0795
 * This file is automatically generated by graphql-let. */

export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    Date: any;
    JSON: any;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    signIn: SignInPayload;
};
export declare type MutationSignInArgs = {
    input: SignInInput;
};
export declare type Query = {
    __typename?: 'Query';
    viewer?: Maybe<Viewer>;
    currentUser?: Maybe<User>;
};
export declare type SignInInput = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type SignInPayload = {
    __typename?: 'SignInPayload';
    user: User;
};
export declare type SignUpInput = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type SignUpPayload = {
    __typename?: 'SignUpPayload';
    user: User;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    seqId: Scalars['Int'];
    username?: Maybe<Scalars['String']>;
    birthday?: Maybe<Scalars['String']>;
    gender?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    githubProviderId?: Maybe<Scalars['String']>;
    googleProviderId?: Maybe<Scalars['String']>;
    phone_number?: Maybe<Scalars['String']>;
    profilePhoto?: Maybe<Scalars['String']>;
    isAdmin?: Maybe<Scalars['Boolean']>;
    createdAt?: Maybe<Scalars['Date']>;
    modifiedAt?: Maybe<Scalars['Date']>;
    deletedAt?: Maybe<Scalars['Date']>;
};
export declare type Viewer = {
    __typename?: 'Viewer';
    id: Scalars['ID'];
    username?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    gender?: Maybe<Scalars['String']>;
    profilePhoto?: Maybe<Scalars['String']>;
};
export declare type PartialFragment = ({
    __typename?: 'User';
} & Pick<User, 'id' | 'username'>);
export declare const PartialFragmentDoc: import("@apollo/client").DocumentNode;
